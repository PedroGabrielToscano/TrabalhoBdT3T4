package app;

import model.Fatura;
import model.Fornecedor;
import services.FaturaService;
import services.FornecedorService;

import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // Instanciamos os serviços
        FornecedorService fornecedorService = new FornecedorService();
        FaturaService faturaService = new FaturaService();

        // Exemplo de listagem de todos os fornecedores com seus contatos
        List<Fornecedor> fornecedores = fornecedorService.listarFornecedoresComContatos();

        // Se quiser permitir que o usuário escolha um fornecedor para ver as faturas, podemos usar Scanner:
        Scanner sc = new Scanner(System.in);
        
        System.out.println("=== LISTA DE FORNECEDORES ===");
        for (Fornecedor f : fornecedores) {
            System.out.println("ID: " + f.getIdFornecedor() 
                    + " | Nome: " + f.getNome() 
                    + " | CNPJ: " + f.getCnpj()
                    + " | Saldo a Pagar: R$ " + f.getSaldoAPagar());
        }
        
        System.out.println("\nDigite o ID do fornecedor para ver os detalhes das faturas: ");
        int idEscolhido = sc.nextInt();
        
        // Localiza o fornecedor escolhido (opcionalmente, poderíamos fazer outra consulta no DB)
        Fornecedor fornecedorSelecionado = null;
        for (Fornecedor f : fornecedores) {
            if (f.getIdFornecedor() == idEscolhido) {
                fornecedorSelecionado = f;
                break;
            }
        }

        if (fornecedorSelecionado != null) {
            // Imprime cabeçalho conforme protótipo
            System.out.println("\nFornecedor: " + fornecedorSelecionado.getNome() 
                    + " (CNPJ: " + fornecedorSelecionado.getCnpj() + ")");
            
            // Exibir emails
            if (fornecedorSelecionado.getListaEmails() != null && !fornecedorSelecionado.getListaEmails().isEmpty()) {
                System.out.println("Emails: ");
                fornecedorSelecionado.getListaEmails().forEach(email -> 
                    System.out.println("  - " + email.getEmailFornecedor())
                );
            }
            // Exibir fones
            if (fornecedorSelecionado.getListaFones() != null && !fornecedorSelecionado.getListaFones().isEmpty()) {
                System.out.println("Fones: ");
                fornecedorSelecionado.getListaFones().forEach(fone -> 
                    System.out.println("  - " + fone.getNroFoneFornecedor())
                );
            }
            
            System.out.println("Saldo a pagar: R$ " + fornecedorSelecionado.getSaldoAPagar());
            
            // Consulta as faturas desse fornecedor
            List<Fatura> faturas = faturaService.listarFaturasPorFornecedor(fornecedorSelecionado.getIdFornecedor());
            
            System.out.println("\nNro. Fatura | Motivo Fatura           | Vencimento  | Valor   | Lançamento");
            System.out.println("---------------------------------------------------------------");
            
            for (Fatura fat : faturas) {
                System.out.printf("%-12d | %-24s | %-11s | %-7.2f | %s%n",
                        fat.getIdFatura(),
                        fat.getMotivoFatura().getMotivo(),
                        fat.getDtVencimento(),
                        fat.getValorFatura(),
                        fat.getDtLancamento()
                );
            }
        } else {
            System.out.println("Fornecedor não encontrado!");
        }

        sc.close();
    }
}
