package transacao;

import database.PostgresDatabaseConnection;
import java.sql.*;
import java.time.LocalDate;

public class TransacaoIncompleta {
    public static void executarTransacaoIncompleta() {
        Connection conn = null;
        try {
            conn = PostgresDatabaseConnection.getConnection();
            conn.setAutoCommit(false);
            
            // INSERT em fatura
            String sqlInsert = "INSERT INTO fatura (idfatura, idfornecedor, valorfatura, idmotivo, dtvencimento, dtlancamento) " +
                               "VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement psInsert = conn.prepareStatement(sqlInsert)) {
                int novoIdFatura = 2001; // Exemplo
                psInsert.setInt(1, novoIdFatura);
                psInsert.setInt(2, 2); // ID do fornecedor
                psInsert.setDouble(3, 750.0);
                psInsert.setInt(4, 2); // ID do motivo
                psInsert.setDate(5, Date.valueOf(LocalDate.now().plusDays(15)));
                psInsert.setDate(6, Date.valueOf(LocalDate.now()));
                psInsert.executeUpdate();
            }
            
            // UPDATE em fornecedor
            String sqlUpdate = "UPDATE fornecedor SET saldoapagar = saldoapagar + ? WHERE idfornecedor = ?";
            try (PreparedStatement psUpdate = conn.prepareStatement(sqlUpdate)) {
                psUpdate.setDouble(1, 750.0);
                psUpdate.setInt(2, 2);
                psUpdate.executeUpdate();
            }
            
            System.out.println("Transação Incompleta: encerrando sem commit/rollback.");
            // Encerramento abrupto
            System.exit(1);
        } catch (Exception e) {
            System.err.println("Erro na transação Incompleta: " + e.getMessage());
        }
    }
}
